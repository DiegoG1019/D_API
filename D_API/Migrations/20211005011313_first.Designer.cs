// <auto-generated />
using System;
using D_API.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace D_API.Migrations
{
    [DbContext(typeof(UserDataContext))]
    [Migration("20211005011313_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("D_API.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentStatus")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Key");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Key = new Guid("07eea8f3-dc1e-458c-a7a7-103cdfd65ebf"),
                            CurrentStatus = 0,
                            Identifier = "Default",
                            Roles = "",
                            Secret = "be400e28fdcdd381773d9476d3040262d6042b187955f0cb5dcece9c73539fb0323ae874cc0320fc5d07033ea0a2e6baf7fedc8b9dec89624a804d4fab03ec92"
                        });
                });

            modelBuilder.Entity("D_API.Models.DataKeeper.DataEntry", b =>
                {
                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("ReadOnlyKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Owner", "Identifier");

                    b.ToTable("DataEntries");

                    b.HasData(
                        new
                        {
                            Owner = new Guid("07eea8f3-dc1e-458c-a7a7-103cdfd65ebf"),
                            Identifier = "default",
                            Data = new byte[0],
                            ReadOnlyKey = new Guid("da46616d-7e9d-4b27-ae40-975abf208bfe")
                        });
                });

            modelBuilder.Entity("D_API.Models.DataKeeper.UserDataTracker", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DailyTransferDownloadQuota")
                        .HasColumnType("float");

                    b.Property<double>("DailyTransferUploadQuota")
                        .HasColumnType("float");

                    b.Property<double>("StorageQuota")
                        .HasColumnType("float");

                    b.Property<double>("StorageUsage")
                        .HasColumnType("float");

                    b.Property<byte[]>("TrackersList")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Key");

                    b.ToTable("UserDataTrackers");

                    b.HasData(
                        new
                        {
                            Key = new Guid("07eea8f3-dc1e-458c-a7a7-103cdfd65ebf"),
                            DailyTransferDownloadQuota = 0.0,
                            DailyTransferUploadQuota = 0.0,
                            StorageQuota = 0.0,
                            StorageUsage = 0.0,
                            TrackersList = new byte[0]
                        });
                });

            modelBuilder.Entity("D_API.Models.DataKeeper.UserHandle", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataEntryIdentifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("DataEntryOwner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("DataEntryOwner", "DataEntryIdentifier");

                    b.ToTable("UserHandles");

                    b.HasData(
                        new
                        {
                            Key = new Guid("07eea8f3-dc1e-458c-a7a7-103cdfd65ebf"),
                            Identifier = "Default"
                        });
                });

            modelBuilder.Entity("D_API.Models.DataKeeper.UserHandle", b =>
                {
                    b.HasOne("D_API.Models.DataKeeper.DataEntry", null)
                        .WithMany("Readers")
                        .HasForeignKey("DataEntryOwner", "DataEntryIdentifier");
                });

            modelBuilder.Entity("D_API.Models.DataKeeper.DataEntry", b =>
                {
                    b.Navigation("Readers");
                });
#pragma warning restore 612, 618
        }
    }
}
